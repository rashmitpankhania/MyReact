{"version":3,"sources":["../server/server.js"],"names":["SourceMapSupport","install","app","use","express","static","bodyParser","json","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","db","collection","find","toArray","then","metadata","total_count","issues","length","_metadata","records","catch","error","status","message","post","newIssue","body","created","Date","err","Issue","validateIssue","insertOne","findOne","_id","result","insertedId","MongoClient","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\nimport 'babel-polyfill';\n\nimport path from 'path';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nif(process.env.NODE_ENV !== 'production'){\n    const webpack = require('webpack');\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const webpackHotMiddleware = require('webpack-hot-middleware')\n\n    const config = require('../webpack.config.js');\n    config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/dev-server');\n    config.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n    const bundler = webpack(config);\n    app.use(webpackDevMiddleware(bundler, {noInfo: true}));\n    app.use(webpackHotMiddleware(bundler, {log: console.log}));\n}\n\napp.get('/api/issues', (req, res) => {\n    db.collection('issues').find().toArray().then(issues => {\n        const metadata = { total_count: issues.length };\n        res.json({ _metadata: metadata, records: issues })\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.post('/api/issues', (req, res) => {\n    const newIssue = req.body;\n    newIssue.created = new Date();\n    if (!newIssue.status)\n        newIssue.status = 'New';\n\n    const err = Issue.validateIssue(newIssue)\n    if (err) {\n        res.status(422).json({ message: `Invalid request: ${err}` });\n        return;\n    }\n\n    db.collection('issues').insertOne(newIssue).then(result =>\n        db.collection('issues').findOne({ _id: result.insertedId }).then(newIssue => {\n        res.json(newIssue);\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\n    }));\n});\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n    db = connection;\n    app.listen(3000, () => {\n        console.log('App started on port 3000');\n    });\n}).catch(error => {\n    console.log('ERROR:', error);\n});"]}